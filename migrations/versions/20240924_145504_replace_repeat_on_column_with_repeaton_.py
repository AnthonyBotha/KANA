"""Replace repeat_on column with RepeatOn table

Revision ID: f3d69799abeb
Revises: a68e0cfaa4e8
Create Date: 2024-09-24 14:55:04.150131

"""
from alembic import op
import sqlalchemy as sa


import os

environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")
schema = SCHEMA if environment == "production" else None

# revision identifiers, used by Alembic.
revision = 'f3d69799abeb'
down_revision = 'a68e0cfaa4e8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('repeat_on',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('daily_id', sa.Integer(), nullable=False),
    sa.Column('day', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['daily_id'], ['dailies.id'], name='pk_dailies_id_repeat'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('dailies', schema=schema) as batch_op:
        batch_op.drop_column('repeat_on')


    if environment == "production":
        op.execute(f"ALTER TABLE repeat_on SET SCHEMA {SCHEMA};")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('dailies', schema=schema) as batch_op:
        batch_op.add_column(sa.Column('repeat_on', sa.VARCHAR(length=9), nullable=True))

    op.drop_table('repeat_on')
    # ### end Alembic commands ###
